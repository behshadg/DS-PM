generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  clerkId    String?    // Optional: stores Clerkâ€™s user ID for syncing
  name       String?
  email      String     @unique
  properties Property[]
  tenants    Tenant[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Property {
  id          String            @id @default(cuid())
  title       String
  description String
  bedrooms    Int
  bathrooms   Int
  price       Float
  address     String
  city        String
  state       String
  zipCode     String
  images      String[]          @default([])
  owner       User              @relation(fields: [ownerId], references: [id])
  ownerId     String
  documents   PropertyDocument[]
  tenants     Tenant[]
  expenses    Expense[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([ownerId])
}

model PropertyDocument {
  id          String   @id @default(cuid())
  url         String
  name        String
  type        String
  property    Property @relation(fields: [propertyId], references: [id])
  propertyId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([propertyId])
}

model Tenant {
  id         String           @id @default(cuid())
  name       String
  email      String           @unique
  phone      String
  property   Property         @relation(fields: [propertyId], references: [id])
  propertyId String
  owner      User             @relation(fields: [ownerId], references: [id])
  ownerId    String
  documents  TenantDocument[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([propertyId])
  @@index([ownerId])
}

model TenantDocument {
  id           String    @id @default(cuid())
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
  tenantId     String
  url          String
  documentType String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([tenantId])
}

model Expense {
  id          String      @id @default(cuid())
  property    Property    @relation(fields: [propertyId], references: [id])
  propertyId  String
  type        ExpenseType
  category    String?
  amount      Float
  date        DateTime
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([propertyId])
}

enum ExpenseType {
  EXPENSE
  INCOME
}